generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// =================================
// --- AUTH & CORE USER MODELS ---
// =================================

model User {
  id       String    @id @default(cuid())
  nik      String    @unique
  name     String
  password String
  role     Role      @default(EMPLOYEE)
  employee Employee?
}

model Employee {
  id           String     @id
  nik          String     @unique
  dateOfBirth  DateTime
  gender       Gender
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  positionId   String
  position     Position   @relation(fields: [positionId], references: [id])
  branchId     String
  branch       Branch     @relation(fields: [branchId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  educations            Education[]
  careerHistories       CareerHistory[]
  organizationHistories OrganizationHistory[]
  projectHistories      ProjectHistory[]
  committeeHistories    CommitteeHistory[]
  gkmHistories          GkmHistory[]
  bestEmployeeScores    BestEmployeeScore[]
  careerPreferences     CareerPreference?
  questionnaireAnswers  Answer[]
  jobInterests          JobInterest[]
}

// =================================
// --- MASTER DATA MODELS ---
// =================================

model Branch {
  id           String       @id
  name         String       @unique
  isHeadOffice Boolean      @default(false)
  employees    Employee[]
  jobVacancies JobVacancy[]
}

model Department {
  id        String     @id
  name      String     @unique
  employees Employee[]
  Position  Position[]
}

model Position {
  id              String                  @id
  name            String
  level           PositionLevel
  departmentId    String
  department      Department              @relation(fields: [departmentId], references: [id])
  employees       Employee[]
  questionnaires  QuestionnairePosition[]
  careerPathsFrom CareerPath[]            @relation("PathFrom")
  careerPathsTo   CareerPath[]            @relation("PathTo")
}

// ========================================
// --- EMPLOYEE HISTORY & PREFERENCES ---
// ========================================

model Education {
  id          String   @id @default(cuid())
  institution String
  major       String
  level       String
  endDate     DateTime
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model CareerHistory {
  id         String    @id @default(cuid())
  position   String
  department String
  startDate  DateTime
  endDate    DateTime?
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model OrganizationHistory {
  id           String    @id @default(cuid())
  organization String
  role         String
  startDate    DateTime
  endDate      DateTime?
  employeeId   String
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model ProjectHistory {
  id          String    @id @default(cuid())
  projectName String
  role        String
  startDate   DateTime
  endDate     DateTime?
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model CommitteeHistory {
  id            String    @id @default(cuid())
  committeeName String
  role          String
  startDate     DateTime
  endDate       DateTime?
  employeeId    String
  employee      Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model GkmHistory {
  id          String   @id @default(cuid())
  gkmName     String
  achievement String
  year        Int
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model BestEmployeeScore {
  id         String   @id @default(cuid())
  score      Float
  period     DateTime
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model CareerPreference {
  id                  String   @id @default(cuid())
  willingToRelocate   Boolean
  relocationReason    String?
  willingToChangeDept Boolean
  shortTermCareerPlan String
  longTermCareerPlan  String
  preferredMentor     String
  preferredTraining   String
  employeeId          String   @unique
  employee            Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

// =================================
// --- FUNCTIONAL MODULES ---
// =================================

model JobVacancy {
  id           String        @id @default(cuid())
  title        String
  description  String
  requirements String
  isPublished  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  branchId     String
  branch       Branch        @relation(fields: [branchId], references: [id])
  jobInterests JobInterest[]
}

model JobInterest {
  id         String     @id @default(cuid())
  employeeId String
  employee   Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  vacancyId  String
  vacancy    JobVacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  createdAt  DateTime   @default(now())

  @@unique([employeeId, vacancyId])
}

model Questionnaire {
  id          String                  @id @default(cuid())
  title       String                  @unique
  description String
  questions   Question[]
  positions   QuestionnairePosition[]
}

model QuestionnairePosition {
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  positionId      String
  position        Position      @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@id([questionnaireId, positionId])
}

model Question {
  id              String        @id @default(cuid())
  text            String
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  answers         Answer[]
}

model Answer {
  id          String   @id @default(cuid())
  value       String
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submittedAt DateTime @default(now())
}

model CareerPath {
  currentPositionId String
  currentPosition   Position @relation("PathFrom", fields: [currentPositionId], references: [id], onDelete: Cascade)
  nextPositionId    String
  nextPosition      Position @relation("PathTo", fields: [nextPositionId], references: [id], onDelete: Cascade)
  description       String?

  @@id([currentPositionId, nextPositionId])
}

// =================================
// --- ENUMS ---
// =================================

enum Role {
  ADMIN
  HR_BRANCH
  HD
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
}

enum PositionLevel {
  STAFF
  SUPERVISOR
  MANAGER
}
