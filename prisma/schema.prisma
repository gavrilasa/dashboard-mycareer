generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  HR_BRANCH
  HD
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
}

enum EducationDegree {
  SMP
  SMA
  SMK
  D1
  D2
  D3
  D4
  S1
  S2
  S3
}

enum VacancyPeriod {
  SHORT_TERM
  LONG_TERM
}

enum PathType {
  ALIGN
  CROSS
}

enum GkmRole {
  KETUA
  WAKIL_KETUA
  SEKRETARIS
  ANGGOTA
  TIDAK_PERNAH
}

enum ProjectRole {
  PIC
  KETUA
  ANGGOTA
}

model User {
  id           String      @id @default(cuid())
  employeeId   String?     @unique
  password     String
  role         Role        @default(EMPLOYEE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  employee     Employee?
  branchId     String?
  departmentId String?
  branch       Branch?     @relation(fields: [branchId], references: [id])
  department   Department? @relation(fields: [departmentId], references: [id])
}

model Employee {
  employeeId             String                  @id
  fullName               String
  dateOfBirth            DateTime
  gender                 Gender
  phoneNumber            String?
  address                String?
  hireDate               DateTime
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  lastEducationDegree    EducationDegree
  lastEducationSchool    String
  lastEducationMajor     String
  branchId               String
  departmentId           String
  positionId             String
  levelId                String
  branch                 Branch                  @relation(fields: [branchId], references: [id])
  department             Department              @relation(fields: [departmentId], references: [id])
  position               Position                @relation(fields: [positionId], references: [id])
  level                  Level                   @relation(fields: [levelId], references: [id])
  user                   User?                   @relation(fields: [employeeId], references: [employeeId])
  careerHistories        CareerHistory[]
  organizationHistories  OrganizationHistory[]
  committeeHistories     CommitteeHistory[]
  projectHistories       ProjectHistory[]
  gkmHistory             GkmHistory?
  bestEmployeeScore      BestEmployeeScore?
  careerPreference       CareerPreference?
  jobInterests           JobInterest[]
  questionnaireResponses QuestionnaireResponse[]
  competencyResults      CompetencyResult[]
}

model Branch {
  id           String       @id
  name         String       @unique
  location     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  employees    Employee[]
  departments  Department[]
  positions    Position[]
  jobVacancies JobVacancy[]
  users        User[]
}

model Department {
  id           String       @id
  name         String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  branchId     String
  branch       Branch       @relation(fields: [branchId], references: [id])
  employees    Employee[]
  positions    Position[]
  jobVacancies JobVacancy[]
  users        User[]

  @@unique([name, branchId])
}

model Position {
  id           String       @id
  name         String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  branchId     String
  branch       Branch       @relation(fields: [branchId], references: [id])
  departmentId String
  department   Department   @relation(fields: [departmentId], references: [id])
  levelId      String
  level        Level        @relation(fields: [levelId], references: [id])
  employees    Employee[]
  jobVacancies JobVacancy[]
  fromPosition CareerPath[] @relation("FromPosition")
  toPosition   CareerPath[] @relation("ToPosition")
  jobRoleId    String
  jobRole      JobRole      @relation(fields: [jobRoleId], references: [id])

  @@unique([name, departmentId, branchId])
}

model Level {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  positions Position[]
  employees Employee[]
}

model CareerHistory {
  id           String    @id @default(cuid())
  positionId   String
  departmentId String
  branchId     String
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employeeId   String
  employee     Employee  @relation(fields: [employeeId], references: [employeeId])
}

model OrganizationHistory {
  id           String    @id @default(cuid())
  organization String
  role         String
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  employeeId   String
  employee     Employee  @relation(fields: [employeeId], references: [employeeId])
}

model CommitteeHistory {
  id         String   @id @default(cuid())
  eventName  String
  role       String
  year       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [employeeId])
}

model ProjectHistory {
  id          String      @id @default(cuid())
  projectName String
  role        ProjectRole
  year        Int
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  employeeId  String
  employee    Employee    @relation(fields: [employeeId], references: [employeeId])
}

model GkmHistory {
  id                 String   @id @default(cuid())
  participationCount Int      @default(0)
  highestRole        GkmRole  @default(TIDAK_PERNAH)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  employeeId         String   @unique
  employee           Employee @relation(fields: [employeeId], references: [employeeId])
}

model BestEmployeeScore {
  id         String   @id @default(cuid())
  count      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employeeId String   @unique
  employee   Employee @relation(fields: [employeeId], references: [employeeId])
}

model CareerPreference {
  id                String   @id @default(cuid())
  preferredMentor   String?
  preferredTraining String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  employeeId        String   @unique
  employee          Employee @relation(fields: [employeeId], references: [employeeId])
}

model CareerPath {
  id             String   @id @default(cuid())
  fromPositionId String
  toPositionId   String
  pathType       PathType
  fromPosition   Position @relation("FromPosition", fields: [fromPositionId], references: [id], onDelete: Cascade)
  toPosition     Position @relation("ToPosition", fields: [toPositionId], references: [id], onDelete: Cascade)

  @@unique([fromPositionId, toPositionId])
  @@map("CareerPaths")
}

model JobVacancy {
  id                  String        @id @default(cuid())
  title               String
  description         String
  requirements        String
  isPublished         Boolean       @default(false)
  period              VacancyPeriod
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  branchId            String
  departmentId        String
  positionId          String
  branch              Branch        @relation(fields: [branchId], references: [id])
  department          Department    @relation(fields: [departmentId], references: [id])
  position            Position      @relation(fields: [positionId], references: [id])
  interestedEmployees JobInterest[]
}

model JobInterest {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  employeeId   String
  jobVacancyId String

  interestType PathType
  period       VacancyPeriod

  employee   Employee   @relation(fields: [employeeId], references: [employeeId])
  jobVacancy JobVacancy @relation(fields: [jobVacancyId], references: [id])

  @@unique([employeeId, interestType, period])
}

model Questionnaire {
  id          String                  @id @default(cuid())
  title       String                  @unique
  description String?
  isMandatory Boolean                 @default(false)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  questions   Question[]
  responses   QuestionnaireResponse[]
}

model Question {
  id              String        @id @default(cuid())
  text            String
  type            String
  competency      String
  subCompetency   String
  options         String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  questionnaireId String
  jobRoles        JobRole[]
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  answers         Answer[]
}

model QuestionnaireResponse {
  id              String        @id @default(cuid())
  submittedAt     DateTime      @default(now())
  employeeId      String
  questionnaireId String
  employee        Employee      @relation(fields: [employeeId], references: [employeeId])
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  answers         Answer[]

  @@unique([employeeId, questionnaireId])
}

model Answer {
  id         String                @id @default(cuid())
  value      String
  createdAt  DateTime              @default(now())
  questionId String
  responseId String
  question   Question              @relation(fields: [questionId], references: [id])
  response   QuestionnaireResponse @relation(fields: [responseId], references: [id])
}

model CompetencyStandard {
  id            String  @id @default(cuid())
  competency    String
  standardValue Float
  jobRoleId     String
  jobRole       JobRole @relation(fields: [jobRoleId], references: [id])

  @@unique([jobRoleId, competency])
}

model TrainingRecommendation {
  id             String @id @default(cuid())
  competency     String
  subCompetency  String
  recommendation String

  @@index([competency])
}

model CompetencyResult {
  id                   String   @id @default(cuid())
  employeeId           String
  employee             Employee @relation(fields: [employeeId], references: [employeeId])
  questionnaireTitle   String
  competency           String
  calculatedScore      Float
  standardScore        Float
  gap                  Float
  recommendationNeeded Boolean
  createdAt            DateTime @default(now())

  @@index([employeeId])
}

model JobRole {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions           Question[]
  positions           Position[]
  competencyStandards CompetencyStandard[]
}
