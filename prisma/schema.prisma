// prisma/schema.prisma

// Generator untuk Prisma Client, yang akan memungkinkan Anda berinteraksi dengan database.
generator client {
  provider = "prisma-client-js"
}

// Konfigurasi datasource untuk database Anda.
// Provider diatur ke 'postgresql' untuk Supabase.
// URL koneksi diambil dari variabel lingkungan.
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Model User: Merepresentasikan pengguna sistem (karyawan, HR, HD).
model User {
  employeeId   String    @id @unique @db.VarChar(10)
  password     String
  role         String    @db.VarChar(10)
  branchId     String
  departmentId String
  name         String
  email        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  employee Employee?
}

// Model Employee: Merepresentasikan data detail karyawan.
model Employee {
  employeeId      String   @id @unique @db.VarChar(10)
  name            String   @db.VarChar(100)
  dateOfBirth     DateTime @db.Date
  hireDate        DateTime @db.Date
  gender          String   @db.VarChar(10)
  personnelAreaId String   @db.VarChar(10)
  positionId      Int
  departmentId    String   @db.VarChar(10)
  levelId         String   @db.VarChar(10)
  age             Float
  lengthOfService Float
  educationDegree String?  @db.VarChar(5)
  schoolName      String?  @db.VarChar(100)
  majorName       String?  @db.VarChar(100)

  bestEmployeeScore   Int?
  formFilledStatus    Int
  questionnaireStatus Int
  createdAt           DateTime
  lastUpdatedAt       DateTime?

  branch     Branch?     @relation(fields: [personnelAreaId], references: [id], onDelete: NoAction)
  level      Level?      @relation(fields: [levelId], references: [id], onDelete: NoAction)
  position   Position?   @relation(fields: [positionId], references: [id], onDelete: NoAction)
  department Department? @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user User @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)

  careerHistories       CareerHistory[]
  committeeHistories    CommitteeHistory[]
  organizationHistories OrganizationHistory[]
  projectHistories      ProjectHistory[]
  trainingPreferences   TrainingPreference[]
  careerPlan            CareerPlan?
  mentorPreferences     MentorPreference?
  employeeCareerChoice  EmployeeCareerChoice?
  gkmHistory            GkmHistory?
  responses             Response[]
  jobInterests          JobInterest[]
  reasons               Reason[]
}

// Model Branch: Merepresentasikan data cabang perusahaan.
model Branch {
  id           String       @id @db.VarChar(10)
  name         String       @db.VarChar(100)
  address      String?
  employees    Employee[]
  supervisors  Supervisor[]
  jobVacancies JobVacancy[]
}

// Model Department: Merepresentasikan data departemen perusahaan.
model Department {
  id                  String                   @id @db.VarChar(10)
  name                String                   @db.VarChar(100)
  positions           Position[]
  involvedDepartments FormInvolvedDepartment[]
  employees           Employee[]
}

// Model Position: Merepresentasikan data posisi pekerjaan.
model Position {
  id                  Int                          @id @default(autoincrement())
  name                String                       @db.VarChar(100)
  departmentId        String                       @db.VarChar(10)
  employees           Employee[]
  department          Department                   @relation(fields: [departmentId], references: [id])
  involvedPositions   AssessmentInvolvedPosition[]
  existingCareerPaths CareerPath[]                 @relation("ExistingPosition")
  futureCareerPaths   CareerPath[]                 @relation("FuturePosition")
  supervisors         Supervisor[]
  jobVacancies        JobVacancy[]
}

// Model Level: Merepresentasikan data tingkatan posisi karyawan.
model Level {
  id             String              @id @db.VarChar(10)
  name           String              @db.VarChar(50)
  employees      Employee[]
  supervisors    Supervisor[]
  jobVacancies   JobVacancy[]
  involvedLevels FormInvolvedLevel[]
}

// Model EmployeeCareerChoice: Preferensi pengembangan karier karyawan.
model EmployeeCareerChoice {
  employeeId                   String   @id @db.VarChar(10)
  careerDevelopmentWillingness Boolean
  rotationWillingness          Boolean?
  crossDepartmentWillingness   Boolean?
  employee                     Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
}

// Model Reason: Alasan ketidakbersediaan rotasi.
model Reason {
  employeeId              String   @id @db.VarChar(10)
  rotationUnwillingReason String?
  employee                Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
}

// Model CareerPlan: Rencana karier jangka pendek dan panjang karyawan.
model CareerPlan {
  employeeId          String      @id @db.VarChar(10)
  shortTermPosition   String
  longTermPosition    String
  employee            Employee    @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  shortTermCareerPath CareerPath? @relation("ShortTermCareerPath", fields: [shortTermPosition], references: [id], onUpdate: NoAction, onDelete: NoAction)
  longTermCareerPath  CareerPath? @relation("LongTermCareerPath", fields: [longTermPosition], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

// Model MentorPreference: Preferensi mentor yang diinginkan karyawan.
model MentorPreference {
  employeeId     String   @id @db.VarChar(10)
  mentorName     String?  @db.VarChar(100)
  mentorPosition String?  @db.VarChar(100)
  mentorBranch   String?  @db.VarChar(100)
  employee       Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
}

// Model GkmHistory: Riwayat partisipasi GKM karyawan.
model GkmHistory {
  employeeId         String   @id @db.VarChar(10)
  participationCount Int?
  highestPosition    String?  @db.VarChar(50)
  employee           Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: Cascade)
}

// Model CareerHistory: Riwayat karier karyawan.
model CareerHistory {
  id              String    @id @default(cuid())
  employeeId      String    @db.VarChar(10)
  positionId      Int
  levelId         String    @db.VarChar(10)
  personnelAreaId String    @db.VarChar(10)
  startDate       DateTime? @db.Date
  endDate         DateTime? @db.Date
  status          Int
  departmentId    String    @db.VarChar(10)
  employee        Employee  @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)

  @@index([employeeId])
}

// Model CommitteeHistory: Riwayat kepanitiaan karyawan.
model CommitteeHistory {
  id           String   @id @default(cuid())
  employeeId   String   @db.VarChar(10)
  eventName    String   @db.VarChar(100)
  positionName String   @db.VarChar(100)
  year         Int
  employee     Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)

  @@index([employeeId])
}

// Model OrganizationHistory: Riwayat organisasi internal karyawan.
model OrganizationHistory {
  id               String   @id @default(cuid())
  organizationName String   @db.VarChar(100)
  positionName     String   @db.VarChar(100)
  startDate        Int
  endDate          Int?
  employeeId       String   @db.VarChar(10)
  employee         Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)

  @@index([employeeId])
}

// Model ProjectHistory: Riwayat proyek karyawan.
model ProjectHistory {
  id                    String   @id @default(cuid())
  title                 String   @db.VarChar(100)
  positionName          String   @db.VarChar(100)
  collaborationDuration Int
  shortDescription      String
  employeeId            String   @db.VarChar(10)
  employee              Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)

  @@index([employeeId])
}

// Model TrainingPreference: Preferensi pelatihan yang diinginkan karyawan.
model TrainingPreference {
  id         String   @id @default(cuid())
  employeeId String   @db.VarChar(10)
  topic      String   @db.VarChar(100)
  employee   Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)

  @@index([employeeId])
}

// Model AssessmentType: Jenis penilaian dalam kuesioner.
model AssessmentType {
  id                String                       @id @default(cuid())
  title             String
  description       String
  type              String                       @db.VarChar(50)
  formId            String
  form              Form                         @relation(fields: [formId], references: [id], onDelete: Cascade)
  involvedPositions AssessmentInvolvedPosition[]
  questions         Question[]
}

// Model Form: Formulir kuesioner.
model Form {
  id                  String                   @id @default(cuid())
  title               String
  description         String
  assessmentTypes     AssessmentType[]
  involvedDepartments FormInvolvedDepartment[]
  responses           Response[]
  involvedLevels      FormInvolvedLevel[]
}

// Model FormInvolvedLevel: Tingkat yang terlibat dalam suatu formulir.
model FormInvolvedLevel {
  id      String @id @default(cuid())
  formId  String
  levelId String @db.VarChar(10)
  form    Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
  level   Level  @relation(fields: [levelId], references: [id], onDelete: Cascade)
}

// Model FormInvolvedDepartment: Departemen yang terlibat dalam suatu formulir.
model FormInvolvedDepartment {
  id           String     @id @default(cuid())
  formId       String
  departmentId String     @db.VarChar(10)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  form         Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
}

// Model AssessmentInvolvedPosition: Posisi yang terlibat dalam suatu jenis penilaian.
model AssessmentInvolvedPosition {
  id               String         @id @default(cuid())
  assessmentTypeId String
  positionId       Int
  assessmentType   AssessmentType @relation(fields: [assessmentTypeId], references: [id], onDelete: Cascade)
  position         Position       @relation(fields: [positionId], references: [id], onDelete: Cascade)
}

// Model Question: Pertanyaan dalam kuesioner.
model Question {
  id               String         @id @default(cuid())
  title            String
  questionText     String
  assessmentTypeId String
  assessmentType   AssessmentType @relation(fields: [assessmentTypeId], references: [id], onDelete: Cascade)
}

// Model Response: Respons kuesioner dari seorang karyawan.
model Response {
  id         String   @id @default(cuid())
  formId     String
  employeeId String   @db.VarChar(10)
  createdAt  DateTime @default(now())
  form       Form     @relation(fields: [formId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [employeeId])
  answers    Answer[]
}

// Model Answer: Jawaban spesifik untuk pertanyaan dalam kuesioner.
model Answer {
  id           String   @id @default(cuid())
  responseId   String
  assessmentId String
  questionId   String
  answerValue  Int
  response     Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
}

// Model CareerPath: Jalur karier yang mungkin.
model CareerPath {
  id                   String       @id @default(cuid())
  existingPositionId   Int
  futurePositionId     Int
  existingPosition     Position     @relation("ExistingPosition", fields: [existingPositionId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  futurePosition       Position     @relation("FuturePosition", fields: [futurePositionId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  shortTermCareerPlans CareerPlan[] @relation("ShortTermCareerPath")
  longTermCareerPlans  CareerPlan[] @relation("LongTermCareerPath")
}

// Model Supervisor: Data supervisor.
model Supervisor {
  id              String   @id @default(cuid())
  personnelAreaId String   @db.VarChar(10)
  employeeId      String   @unique @db.VarChar(10)
  name            String   @db.VarChar(100)
  positionId      Int
  departmentId    String   @db.VarChar(10)
  levelId         String   @db.VarChar(10)
  hireDate        DateTime @db.Date
  dateOfBirth     DateTime @db.Date
  gender          String   @db.VarChar(10)
  age             Float
  retirementDate  DateTime
  lengthOfService Float

  branch   Branch   @relation(fields: [personnelAreaId], references: [id], onDelete: NoAction)
  level    Level    @relation(fields: [levelId], references: [id], onDelete: NoAction)
  position Position @relation(fields: [positionId], references: [id], onDelete: NoAction)
}

// Model JobVacancy: Lowongan kerja.
model JobVacancy {
  id              String        @id @default(cuid())
  personnelAreaId String        @db.VarChar(10)
  departmentId    String        @db.VarChar(10)
  positionId      Int
  levelId         String        @db.VarChar(10)
  availableDate   DateTime
  jobSummary      String?
  jobDescription  String?
  published       Int           @default(1)
  branch          Branch        @relation(fields: [personnelAreaId], references: [id], onDelete: NoAction)
  level           Level?        @relation(fields: [levelId], references: [id], onDelete: NoAction)
  position        Position      @relation(fields: [positionId], references: [id], onDelete: NoAction)
  jobInterests    JobInterest[]
}

// Model JobInterest: Minat karyawan pada lowongan kerja.
model JobInterest {
  id           String     @id @default(cuid())
  employeeId   String     @db.VarChar(10)
  jobVacancyId String
  createdAt    DateTime   @default(now())
  employee     Employee   @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  jobVacancy   JobVacancy @relation(fields: [jobVacancyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
